<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>弯路</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-20T15:07:26.421Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ruofan Shen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring MVC 处理异步请求（上）- CALLABLE 详解</title>
    <link href="http://yoursite.com/2018/11/07/Spring%20MVC%204.2.4%20%E6%96%87%E6%A1%A3%E5%AE%9E%E8%B7%B5(%E4%BA%94)--%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/11/07/Spring MVC 4.2.4 文档实践(五)--异步请求处理/</id>
    <published>2018-11-07T09:49:16.250Z</published>
    <updated>2018-11-20T15:07:26.421Z</updated>
    
    <content type="html"><![CDATA[<p>Spring 在 3.0 之后引入了异步请求的功能，这种请求在服务器会返回 Callable 的对象，或者是 DeferredResult 对象。Callable 和 DeferredResult 会将其中的逻辑交给其他线程进行处理，因此，Spring 在处理耗时较长的请求时就不会出现阻塞的现象，使得其他的请求可以如期地进来。关于异步请求的使用，需要将比较耗时的处理逻辑放入 <code>TaskExecutor</code> 中，这样就可以使该逻辑进入其他线程操作。同时主线程释放资源，使得该线程可以去接收其他的请求。这让我们的 web 应用可以“分身”去即时处理更多的请求。本文是 Spring MVC 文档实践中针对于异步请求实现的准备部分，我们来看看 Callable 的运行原理。</p><p>Callable 接口是 jdk 1.5 时新加入的接口类，根据源码注释它是 </p><blockquote><p>A task that returns a result and may throw an exceptiion.</p></blockquote><p>因此，Callable 也是一个<strong>任务</strong>，他可以放入线程池中执行，并且可以返回一个结果。而 Runnable 的接口就不提供返回结果的功能。我们可以从一个 Callable 的实现实例入手，来看 Callable 在线程池中的运行原理。</p><h2 id="Callable-对象实例-demo"><a href="#Callable-对象实例-demo" class="headerlink" title="Callable 对象实例 demo"></a>Callable 对象实例 demo</h2><p>这部分的代码由于需要直接运行，存在于我们的 spring-doc 工程的 test 路径下。首先我们来实现 Callable 接口，该类用于计算阶乘（x!）的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntegerTask</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> InvalidParameterException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= number; i++) &#123;</span><br><span class="line">            ret *= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后，我们的测试方法需要初始化 ExecutorService 来运行该对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        IntegerTask integerTask = <span class="keyword">new</span> IntegerTask(<span class="number">5</span>);</span><br><span class="line">        ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">        Future&lt;Integer&gt; futureTask = executorService.submit(integerTask);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Assert.assertEquals(futureTask.get(<span class="number">5</span>, TimeUnit.SECONDS).intValue(), <span class="number">120</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我们运行该测试例之后，可以预见，测试例是通过的。</p><h2 id="Callable-及其在线程池中运行原理解析"><a href="#Callable-及其在线程池中运行原理解析" class="headerlink" title="Callable 及其在线程池中运行原理解析"></a>Callable 及其在线程池中运行原理解析</h2><p>Callable 接口比较简单，只需要我们实现 <code>call()</code> 方法，即可让你的方法在被扔进线程池中执行，从而不占用你的主线程并且在后面可以调用 call 的结果。</p><p>在调试上述测试程序的过程中，我们看到 futureTask 变量在调用栈中是一个 FutureTask 类。而我们后续的结果调用都是通过这个 FutureTask 类，因此，我们可以通过 FutureTask 的解析来搞清楚 Callable 是如何运行的。</p><p><img src="/Users/shenruofan/Documents/试用期学习报告/springMVC文档实践集/配图/FutureTask.png" alt="FutureTask"></p><h4 id="FutureTask-构造函数"><a href="#FutureTask-构造函数" class="headerlink" title="FutureTask 构造函数"></a>FutureTask 构造函数</h4><p>首先是 FutureTask 的构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.callable = callable;</span><br><span class="line"><span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 FutureTask 类封装了 Callable 实例，让 Callable 实例可以在 FutureTask 的控制下异步运行。其中我们可以发现一个 <code>state</code> 变量，这应当是表现一个 FutureTask 实例当前状态的变量。</p><h4 id="FutureTask-的状态"><a href="#FutureTask-的状态" class="headerlink" title="FutureTask 的状态"></a>FutureTask 的状态</h4><p>根据 NEW 的定义，我们找到了 FutureTask 的状态定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NEW          = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COMPLETING   = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NORMAL       = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCEPTIONAL  = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED    = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTING = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTED  = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><p>根据官方文档，可以画出 FutureTask 的一个生命周期，他可以走出如下的花样：</p><p><img src="/Users/shenruofan/Documents/试用期学习报告/springMVC文档实践集/配图/FutureTask状态变化.png" alt="FutureTask 状态变化"></p><p>可以稍微注意一下 state 的定义后面的 int，经过比较，我们可以通过 int 的大小大致判断 FutureTask 处于哪个状态。</p><h4 id="FutureTask-运行"><a href="#FutureTask-运行" class="headerlink" title="FutureTask 运行"></a>FutureTask 运行</h4><p>FutureTask 的 <code>run()</code> 方法中执行了其内部 Callable 实例的 <code>call()</code> 方法，并且返回结果，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (state != NEW ||</span><br><span class="line">         !UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, runnerOffset,</span><br><span class="line">                                         <span class="keyword">null</span>, Thread.currentThread()))</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Callable&lt;V&gt; c = callable;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; state == NEW) &#123;</span><br><span class="line">            V result;</span><br><span class="line">            <span class="keyword">boolean</span> ran;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = c.call();</span><br><span class="line">                ran = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                result = <span class="keyword">null</span>;</span><br><span class="line">                ran = <span class="keyword">false</span>;</span><br><span class="line">                setException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ran)</span><br><span class="line">                set(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// runner must be non-null until state is settled to</span></span><br><span class="line">        <span class="comment">// prevent concurrent calls to run()</span></span><br><span class="line">        runner = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// state must be re-read after nulling runner to prevent</span></span><br><span class="line">        <span class="comment">// leaked interrupts</span></span><br><span class="line">        <span class="keyword">int</span> s = state;</span><br><span class="line">        <span class="keyword">if</span> (s &gt;= INTERRUPTING)</span><br><span class="line">            handlePossibleCancellationInterrupt(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在进入 run 方法时，首先要判定 <strong>state 是不是 NEW</strong>，如果状态爱不是 NEW，那么也没有启动的必要了。之后，还要判定 <strong>UNSAFE.compareAndSwapObject 方法是不是成功</strong>，这里做的是把当前的线程分配给这个 FutureTask，如果线程分配失败，那么 FutureTask 也是无法启动的。</p><p>当通过这两层检验之后，进入 try 的部分，我们还是要判断 Callable 实例的存在性以及 FutureTask 的当前状态。之后，需要初始化一个 result，其在 Callable 实例调用 call() 方法结束后，去获得这个结果（<code>result=c.call()</code>)。最后，我们会进入两种结果，一种结果是 <strong>NORMAL</strong>，这个时候会去处理 result；而另一种结果是 <strong>Exceptional</strong>，这个时候要去处理 Callable 实例抛出的 Exception。</p><p>其实这其中还会有一种状态，便是 Callable 的执行被打断了，我们看到 finally 部分 <code>s &gt;= INTERRUPTING</code> 后会去处理被打断的逻辑。这三种状态结果后面都会讲到。当前阶段，我们只需要知道 run() 方法中包含了 FutureTask 从 NEW 到后续的状态的演变，而针对这几种状态，FutureTask 都有对应的方法进行<strong>“善后处理”</strong>。但是，无论哪个状态，FutureTask 最后都是要把 runner 置为 null。</p><h4 id="FutureTask-善后工作"><a href="#FutureTask-善后工作" class="headerlink" title="FutureTask 善后工作"></a>FutureTask 善后工作</h4><p>刚才看到，当 FutureTask 调用 callable 的 <code>call()</code> 方法之后，无论 <code>call()</code> 中是完成了功能还是抛出 exception，都会调用对应的善后方法：<code>set(result)/ setException(ex)</code>，首先看一下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(V v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, NEW, COMPLETING)) &#123;</span><br><span class="line">        outcome = v;</span><br><span class="line">        UNSAFE.putOrderedInt(<span class="keyword">this</span>, stateOffset, NORMAL); <span class="comment">// final state</span></span><br><span class="line">        finishCompletion();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setException</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, NEW, COMPLETING)) &#123;</span><br><span class="line">        outcome = t;</span><br><span class="line">        UNSAFE.putOrderedInt(<span class="keyword">this</span>, stateOffset, EXCEPTIONAL); <span class="comment">// final state</span></span><br><span class="line">        finishCompletion();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，set 类方法的逻辑很简单，首先把结果（成功执行的结果 v 或者错误的 Throwable 对象）赋值给 outcome，之后将 FutureTask 的状态设置为 NORMAL/EXCEPTIONAL；最后，这两个方法都需要执行一个 <code>finishCompletion()</code> 方法，我们再来看看 <code>finishCompletion()</code> 做了什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finishCompletion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert state &gt; COMPLETING;</span></span><br><span class="line">    <span class="keyword">for</span> (WaitNode q; (q = waiters) != <span class="keyword">null</span>;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, waitersOffset, q, <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                Thread t = q.thread;</span><br><span class="line">                <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    q.thread = <span class="keyword">null</span>;</span><br><span class="line">                    LockSupport.unpark(t);</span><br><span class="line">                &#125;</span><br><span class="line">                WaitNode next = q.next;</span><br><span class="line">                <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                q.next = <span class="keyword">null</span>; <span class="comment">// unlink to help gc</span></span><br><span class="line">                q = next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    done();</span><br><span class="line"></span><br><span class="line">    callable = <span class="keyword">null</span>;        <span class="comment">// to reduce footprint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>finishCompletion 主要是释放这个占有的线程，将自己的 Callable 置为 null，是一系列收尾工作。</p><h3 id="FutureTask-获取执行结果"><a href="#FutureTask-获取执行结果" class="headerlink" title="FutureTask 获取执行结果"></a>FutureTask 获取执行结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (unit == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">int</span> s = state;</span><br><span class="line">    <span class="keyword">if</span> (s &lt;= COMPLETING &amp;&amp;</span><br><span class="line">        (s = awaitDone(<span class="keyword">true</span>, unit.toNanos(timeout))) &lt;= COMPLETING)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">    <span class="keyword">return</span> report(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从之前我们的 demo 中也可以看到，FutureTask 通过 <code>get()</code> 方法来获得最终的执行结果，而上面就是 get 方法的源码。主要内容是等待 FutureTask 的 state 到达 COMPLETING 的时候，返回最终的结果 outcome。该部分重要的逻辑在 <code>awaitDone()</code> 方法中。awaitDone 的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">awaitDone</span><span class="params">(<span class="keyword">boolean</span> timed, <span class="keyword">long</span> nanos)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> deadline = timed ? System.nanoTime() + nanos : <span class="number">0L</span>;</span><br><span class="line">    WaitNode q = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> queued = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">            removeWaiter(q);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> s = state;</span><br><span class="line">        <span class="keyword">if</span> (s &gt; COMPLETING) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q != <span class="keyword">null</span>)</span><br><span class="line">                q.thread = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s == COMPLETING) <span class="comment">// cannot time out yet</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (q == <span class="keyword">null</span>)</span><br><span class="line">           q = <span class="keyword">new</span> WaitNode();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!queued)</span><br><span class="line">            queued = UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, waitersOffset,</span><br><span class="line">                                                     q.next = waiters, q);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (timed) &#123;</span><br><span class="line">            nanos = deadline - System.nanoTime();</span><br><span class="line">            <span class="keyword">if</span> (nanos &lt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                removeWaiter(q);</span><br><span class="line">                <span class="keyword">return</span> state;</span><br><span class="line">            &#125;</span><br><span class="line">            LockSupport.parkNanos(<span class="keyword">this</span>, nanos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的逻辑如下：</p><ul><li>检查方法调用时是否支持了阻塞模式，如果是 timed，则会设置一个 deadline，否则默认值为 0，不支持阻塞</li><li>开启死循环模式，检查以下的条件：<ul><li>检查当前线程是否被 interrupted<ul><li>如果是，则抛出 InterruptedException</li><li>如果不是，则继续执行后续循环。</li></ul></li><li>检查 s 是否处于 COMPLETING 之后（s &gt; COMPLETING），表示该 FutureTask 已经处于任意一个可以退出的状态，则将该线程置 null，退出</li><li>如果 s 还是在 COMPLETING，则调用 Thread.yield，这里只是一个信号表示处理器可以拿走这个线程的资源让它等待；当然，也可以继续让这个线程执行下去。</li><li>后续检查这个 FutureTask 是否已经被处理器纳入 waitNode，如果没有，则创建 waitNode 对象，将其加入到 waiters 的队列中等待资源的分配。</li><li>最后，判断是否支持阻塞，如果已经超时，则退出当前结果；如果未超时，则持续阻塞，直到下次被唤醒。</li></ul></li></ul><p>当 awaitDone 方法结束后出来之后，将会使用 <code>report()</code> 返回最终结果。</p><h3 id="FutureTask-的取消"><a href="#FutureTask-的取消" class="headerlink" title="FutureTask 的取消"></a>FutureTask 的取消</h3><p>FutureTask 由于是分线程执行的，因此可以像其他线程任务一样可以被 Interrupted，而在 FutureTask 中使用的则是 <code>cancel()</code> 方法，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(state == NEW &amp;&amp;</span><br><span class="line">          UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, NEW,</span><br><span class="line">              mayInterruptIfRunning ? INTERRUPTING : CANCELLED)))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;    <span class="comment">// in case call to interrupt throws exception</span></span><br><span class="line">        <span class="keyword">if</span> (mayInterruptIfRunning) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread t = runner;</span><br><span class="line">                <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">                    t.interrupt();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123; <span class="comment">// final state</span></span><br><span class="line">                UNSAFE.putOrderedInt(<span class="keyword">this</span>, stateOffset, INTERRUPTED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        finishCompletion();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cancel 方法有个输入，表示取消方法是否可以在 FutureTask 在执行过程中被打断。之后，打断该线程的执行，并且执行扫尾工作。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文作为 Spring MVC 处理异步请求的准备篇，基于 Callable 的 demo 讲解了 Callable 的执行原理，背后其实是 FutureTask 在封装 Callable 的一些执行逻辑，为下一篇介绍 Spring MVC 返回 Callable 处理异步请求做准备。</p>]]></content>
    
    <summary type="html">
    
      Spring MVC 现在支持了异步请求的处理，该请求将会返回一个 Callable 对象，而 Callable 需要交给线程池去处理其中的逻辑。这就说明服务器可以将耗时较长的请求处理逻辑放入 Callable 中，交由其他线程处理。这便使主线程可以去处理请求，高效分配线程资源。本文将是 Spring MVC 处理异步请求的准备篇，我们将基于一个 Callable demo，看看 Java 的线程池处理 Callable 的原理，而在这之后，我们将会带来 Spring MVC 是如何处理异步请求的实例。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WebApplicationContext 中特殊的 bean 类型（三）--- MultiPartResolver</title>
    <link href="http://yoursite.com/2018/11/07/Spring%20MVC%204.2.4%20%E6%96%87%E6%A1%A3%E5%AE%9E%E8%B7%B5(%E5%9B%9B)--MultipartResolver/"/>
    <id>http://yoursite.com/2018/11/07/Spring MVC 4.2.4 文档实践(四)--MultipartResolver/</id>
    <published>2018-11-07T05:50:25.876Z</published>
    <updated>2018-11-20T15:07:25.129Z</updated>
    
    <content type="html"><![CDATA[<p>MultipartResolver 是 Spring MVC 中负责处理文件的类型，使 Spring 可以支持通过 HTML 表单等格式的文件上传功能。本章将通过 MultipartResolver 源码，来解释该类型如何将上传文件请求加工为 Controller 可以认识的请求并且完成文件的存储的。最后也会按照惯例，给出对应的测试代码。测试代码将会基于上一篇的代码继续进行下去。</p><h2 id="MultipartResolver-源码解析"><a href="#MultipartResolver-源码解析" class="headerlink" title="MultipartResolver 源码解析"></a>MultipartResolver 源码解析</h2><h3 id="MultipartResolver-接口"><a href="#MultipartResolver-接口" class="headerlink" title="MultipartResolver 接口"></a>MultipartResolver 接口</h3><p>MultipartResolver 接口代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.multipart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MultipartResolver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isMultipart</span><span class="params">(HttpServletRequest var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">MultipartHttpServletRequest <span class="title">resolveMultipart</span><span class="params">(HttpServletRequest var1)</span> <span class="keyword">throws</span> MultipartException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cleanupMultipart</span><span class="params">(MultipartHttpServletRequest var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 Spring 官方文档：</p><blockquote><p>By default, no multipart handling will be done by Spring, as some developers will want to handle multiparts themselves. You will have to enable it yourself by adding a multipart resolver to the web application’s context. After you have done that, <strong>each request will be inspected to see if it contains a multipart. If no multipart is found, the request will continue as expected. However, if a multipart is found in the request, the <code>MultipartResolver</code> that has been declared in your context will be used</strong>. After that, the multipart attribute in your request will be treated like any other attribute.</p></blockquote><p>大意就是，如果在 Spring 工程中配置了 MultipartResolver， 则其会先于 HandlerMapping 转发功能生效，判断其是不是含有 Multipart 部分。具体来讲，首先截取 HttpServletRequest 调用 <code>isMultipart</code> 方法去判定该请求是不是存在 MultipartContent。如果有则 MultipartResolver 就会生效并且调用 <code>resolveMultipart</code> 将该 request 包装成为 MultipartHttpServletRequest 类供后续的 Controller 使用。 </p><h3 id="CommonsMultipartResolver-类"><a href="#CommonsMultipartResolver-类" class="headerlink" title="CommonsMultipartResolver 类"></a>CommonsMultipartResolver 类</h3><p>Spring 中 MultipartResolver 的默认实现类是 CommonsMultipartResolver，我们就从这个类入手，解释 MultiPartResolver 是如何是如何解析请求中的 Multipart 部分。首先看 CommonsMultipartResolver 对于 resolveMultipart 的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> MultipartHttpServletRequest <span class="title">resolveMultipart</span><span class="params">(<span class="keyword">final</span> HttpServletRequest request)</span> <span class="keyword">throws</span> MultipartException </span>&#123;</span><br><span class="line">        Assert.notNull(request, <span class="string">"Request must not be null"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.resolveLazily) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DefaultMultipartHttpServletRequest(request) &#123;</span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initializeMultipart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    MultipartParsingResult parsingResult = CommonsMultipartResolver.<span class="keyword">this</span>.parseRequest(request);</span><br><span class="line">                    <span class="keyword">this</span>.setMultipartFiles(parsingResult.getMultipartFiles());</span><br><span class="line">                    <span class="keyword">this</span>.setMultipartParameters(parsingResult.getMultipartParameters());</span><br><span class="line">                    <span class="keyword">this</span>.setMultipartParameterContentTypes(parsingResult.getMultipartParameterContentTypes());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            MultipartParsingResult parsingResult = <span class="keyword">this</span>.parseRequest(request);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DefaultMultipartHttpServletRequest(request, parsingResult.getMultipartFiles(), parsingResult.getMultipartParameters(), parsingResult.getMultipartParameterContentTypes());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们可以后面再来讨论 <strong>resolveLazily</strong> 的选项，假设没有 resolveLazily，则该方法主要会调用 <code>parseRequest</code> 方法，再看一下 <strong>parseRequest</strong> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> MultipartParsingResult <span class="title">parseRequest</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> MultipartException </span>&#123;</span><br><span class="line">        String encoding = <span class="keyword">this</span>.determineEncoding(request);</span><br><span class="line">        FileUpload fileUpload = <span class="keyword">this</span>.prepareFileUpload(encoding);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;FileItem&gt; fileItems = ((ServletFileUpload)fileUpload).parseRequest(request);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.parseFileItems(fileItems, encoding);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SizeLimitExceededException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MaxUploadSizeExceededException(fileUpload.getSizeMax(), var5);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileSizeLimitExceededException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MaxUploadSizeExceededException(fileUpload.getFileSizeMax(), var6);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileUploadException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MultipartException(<span class="string">"Failed to parse multipart servlet request"</span>, var7);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里主要做的是生成一个 FileUpload 类，这是一个文件上传的辅助类，并且把 request 中的 Multpart 部分解析成为 fileItem  的 List，后续就是使用 parseFileItem 将获取的 List 的每一部分进行解析（这部分感兴趣的可以再深入看下去）并且生成 CommonsMultipartFile 存入 MultipartMaps 中，我对这部分的理解就是把文件的各个部分用后续 Controller 可以识别的形式封装起来。这个部分返回的是 <strong>MultipartParsingResult</strong>，之后会被封装成为 DefaultMultipartHttpServletRequest 供后续的 Controller 解析使用。</p><h3 id="ResolveLazily-选项"><a href="#ResolveLazily-选项" class="headerlink" title="ResolveLazily 选项"></a>ResolveLazily 选项</h3><p>ResolveLazily 选项返回的是一个已经实现了 initializeMultipart 方法的 DefaultMultipartHttpServletRequest 对象，这会减少 MultipartResolver 这部分的开销，而在 Controller 收到该 request 并强制转义成为 MultipartRequest 时生效。可以看到，这个方法封装了 request 和对应的转换文件的方法，和我们在 ResolveLazily 为 false 时在做的事情差不多，只不过 ResolveLazily 把这些方法都封装在了 init 方法中，只有在需要调用的时候才会调用。（考虑一下你的 Controller 不用解析文件的情况）。</p><h2 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h2><p>为了完成文件上传功能，我们需要在 pom.xml 中配置如下的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后，我们首先在 root-context.xml 中配置 MultipartResolver bean:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"102400"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"514"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"uploadTempDir"</span> <span class="attr">value</span>=<span class="string">"upload/temp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>uploadTempDir 表示文件在服务器缓存的地方。然后，我们配置一下文件上传的 Controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"file-upload.do"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"fileUpload"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"fileUpload.do"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileUpload</span><span class="params">(@RequestPart(value = <span class="string">"file"</span>)</span> MultipartFile file, HttpServletRequest request) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String name = file.getName();</span><br><span class="line"></span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        String contentType = file.getContentType();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"name -&gt; "</span> + name +</span><br><span class="line">                <span class="string">" originalFilename -&gt; "</span> + originalFilename +</span><br><span class="line">                <span class="string">" contentType -&gt; "</span> + contentType);</span><br><span class="line">        String filePath = request.getServletContext().getRealPath(<span class="string">"/"</span>);</span><br><span class="line">        file.transferTo(<span class="keyword">new</span> File(filePath + <span class="string">"/"</span> + originalFilename));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文的 <strong>MultipartFile</strong> 也是师出有名，这是由 MultipartResolver 在解析了 Request 的 MultiContent 之后才会出现的类。方法中获取了该 MultipartFile 的 key 名字，文件名，以及 contentType，一般会获得后缀名。最后，将他存到我们的 target 文件夹下面的应用运行的根目录下面。</p><p>最后，我们配置好前端页面，之前我们的 Controller 上面返回 jsp 的名字为 fileUpload，那么我们的前端页面文件名也为 fileUpload.jsp：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>file upload test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>File Upload Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span> = <span class="string">"post"</span> <span class="attr">action</span> = <span class="string">"/fileUpload.do"</span> <span class="attr">enctype</span> = <span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"file"</span> <span class="attr">name</span> = <span class="string">"file"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"submit"</span> <span class="attr">value</span> = <span class="string">"开始上传"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后，我们输入 <code>http://localhost:8080/file-upload.do</code> 之后，并且上传文件，点击“开始上传”，我们就可以看到上传的文件会存到自己的目标路径下。</p>]]></content>
    
    <summary type="html">
    
      Spring MVC 支持文件上传，本文将基于 MultiPartResolver 的实现，讲述 MultiPartResolver 是何时生效，并且如何将上传的文件数据解析成为 Controller 认识的样子，存入我们服务器的路径下。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WebApplicationContext 中特殊的 bean 类型（二）--- LocaleResolver</title>
    <link href="http://yoursite.com/2018/11/01/Spring%20MVC%204.2.4%20%E6%96%87%E6%A1%A3%E5%AE%9E%E8%B7%B5(%E4%B8%89)--LocaleResolver/"/>
    <id>http://yoursite.com/2018/11/01/Spring MVC 4.2.4 文档实践(三)--LocaleResolver/</id>
    <published>2018-11-01T01:59:29.469Z</published>
    <updated>2018-11-20T15:07:29.113Z</updated>
    
    <content type="html"><![CDATA[<p>本章承接前面的内容，继续讲述 LocaleResolver。</p><p>LocalResolver 的作用是解析客户的请求来自什么地区，这样就可以针对请求中的地区信息，返回不同语言的视图，以满足 Spring MVC 工程国际化的需要。而 LocalContextResolver 则继承自 LocalResolver 接口，加入了对时区的支持。</p><h2 id="LocalResolver-源码"><a href="#LocalResolver-源码" class="headerlink" title="LocalResolver 源码"></a>LocalResolver 源码</h2><p>首先来看 LocalResolver 的默认配置（AcceptHeaderLocaleResolver）的源码，该配置实现了 LocalResolver 的接口，并且重写 resolveLocale 方法，使其可以通过 Request 的 Header 字段解析请求的地区信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AcceptHeaderLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AcceptHeaderLocaleResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getLocale();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Cannot change HTTP accept header - use a different locale resolution strategy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里 <strong>resolveLocale</strong> 方法直接去拿了请求中的 locale 字段，查看客户端这边最支持哪种语言。并且该类不支持 set 方法。</p><h2 id="LocalResolver-代码实例"><a href="#LocalResolver-代码实例" class="headerlink" title="LocalResolver 代码实例"></a>LocalResolver 代码实例</h2><h3 id="locale-专属的-properties-文件"><a href="#locale-专属的-properties-文件" class="headerlink" title="locale 专属的 properties 文件"></a>locale 专属的 properties 文件</h3><p>首先，我们需要配置三个对应语言的 resource 文件，在 resources/locales 文件夹下分别创建 locale_en.properties, locale_en_US.properties, locale_zh_CN.properties 文件，<strong>注意</strong>直接创建这三个文件后 Intellij 会把它合到一个文件夹里面（这里应该会变成一个名为 locale 文件夹）。properties 文件内的代码分别是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># locale_en.properties 文件</span><br><span class="line">message.locale=en_hello</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># locale_en_US.properties 文件</span><br><span class="line">message.locale=en_US_hello</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># locale_zh_CN.properties 文件</span><br><span class="line">message.locale=zh_CN_hello</span><br></pre></td></tr></table></figure><h3 id="LocaleResolver-在-Spring-配置文件中的配置"><a href="#LocaleResolver-在-Spring-配置文件中的配置" class="headerlink" title="LocaleResolver 在 Spring 配置文件中的配置"></a>LocaleResolver 在 Spring 配置文件中的配置</h3><p>在 root-context 配置 LocalResolver 的 bean，并且配置对应的国际化资源文件 ReloadableResourceBundleMessageSource，其中的方法可以针对输入的 Locale 对象去获取对应的 resource 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.test.myapp.example"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 其余 bean 配置 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--LocaleResolver 配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localeResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 国际化资源文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ReloadableResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果资源文件放在classpath下，basename的value必须有classpath:前缀，否则报错：No message found under code... --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个地方 value 是红色也没问题，Spring MVC 在运行的时候还是会找到这些资源文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"classpath:locales/locale"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果在国际化资源文件中找不到对应代码的信息，就用这个代码作为名称返回  --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="useCodeAsDefaultMessage" value="true" /&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="defaultEncoding" value="ISO-8859-1"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 其余 bean 配置 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="LocaleResolver-测试接口"><a href="#LocaleResolver-测试接口" class="headerlink" title="LocaleResolver 测试接口"></a>LocaleResolver 测试接口</h3><p>然后就是为我们的 LocaleResolver 配置一个接口，该接口的功能是获取发出当前的客户端支持哪些语言，并且最为偏好的语言是什么，之后再去获取对应的 properties 文件中的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocaleResolverController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/accept-header-resolver.do"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String clientLocale = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">// 获取客户端支持的语言</span></span><br><span class="line">        Enumeration&lt;Locale&gt; locales = request.getLocales();</span><br><span class="line">        <span class="keyword">while</span> (locales.hasMoreElements()) &#123;</span><br><span class="line">            Locale locale = locales.nextElement();</span><br><span class="line">            clientLocale += locale + <span class="string">","</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RequestContext requestContext = <span class="keyword">new</span> RequestContext(request);</span><br><span class="line">        <span class="comment">// 获取对应地区的 properties 中的信息</span></span><br><span class="line">        String value = requestContext.getMessage(<span class="string">"message.locale"</span>);</span><br><span class="line"></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"localeResolver"</span>);</span><br><span class="line"></span><br><span class="line">        modelAndView.addObject(<span class="string">"clientLocale"</span>, clientLocale);</span><br><span class="line">        modelAndView.addObject(<span class="string">"currentLocale"</span>, requestContext.getLocale());</span><br><span class="line">        modelAndView.addObject(<span class="string">"localeResource"</span>, value);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中 <code>clientLocale</code> 表示客户端浏览器支持的语言，<code>currentLocale</code> 则是客户端的偏好语言，<code>value</code> 则表示根据客户端偏好语言取回的对应语言 properties 中的字段值。</p><h3 id="LocaleResolver-测试前端页面"><a href="#LocaleResolver-测试前端页面" class="headerlink" title="LocaleResolver 测试前端页面"></a>LocaleResolver 测试前端页面</h3><p>上面测试接口返回的是一个 ModelAndView 对象，因此，我们还需要 jsp 前端文件，来输出上述的字段：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;locale resolver page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    客户端支持：$&#123;clientLocale&#125; 客户端当前地区：$&#123;currentLocale&#125;, 服务端对应内容：$&#123;localeResource&#125;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>我们已经完成了具体代码的编写，下面进入测试。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>这次测试以 chrome 为例，首先查看 chrome 设置部分：</p><p><img src="/Users/shenruofan/Desktop/屏幕快照 2018-11-06 下午4.32.43.png" alt="chrome 语言设置"></p><p>可以看到，语言设置这一栏我们把偏好语言设为英语（EN）。运行工程后，在浏览器中输入：<a href="http://localhost:8080/accept-header-resolver.do，我们会看到如下的标识：" target="_blank" rel="noopener">http://localhost:8080/accept-header-resolver.do，我们会看到如下的标识：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端支持：en,zh,en_US,zh_CN, 客户端当前地区：en, 服务端对应内容：en_hello</span><br></pre></td></tr></table></figure><p>之后，我们在语言设置中把中文（简体）（zh_CN）放在语言偏好的第一位，再输入相同的地址，则会出现如下的标识：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端支持：zh_CN,zh,en,en_US, 客户端当前地区：zh_CN, 服务端对应内容：zh_CN_hello</span><br></pre></td></tr></table></figure><p>这可以说明，我们的 LocaleResolver 在工程已经生效。</p>]]></content>
    
    <summary type="html">
    
      Spring MVC 也为网页应用的国际化提供了一些准备，使用 LocaleResolver 将可以解析用户 request 头部来检查用户的请求来自什么地区，用户的浏览器支持哪些语言，并且可以返回对应语言的 jsp 页面。本文将基于 LocaleResolver 的源码，解析 LocaleResolver 是如何通过请求解析，返回对应资源的。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WebApplicationContext 中特殊的 bean 类型（一）--- 请求/异常处理</title>
    <link href="http://yoursite.com/2018/10/29/Spring%20MVC%204.2.4%20%E6%96%87%E6%A1%A3%E5%AE%9E%E8%B7%B5(%E4%BA%8C)--%E8%AF%B7%E6%B1%82_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/10/29/Spring MVC 4.2.4 文档实践(二)--请求_异常处理/</id>
    <published>2018-10-29T06:21:01.741Z</published>
    <updated>2018-11-20T15:07:27.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>其实 Spring 的基本思想就是“万物都是 bean”，那么为了满足 spring 工程的需要，spring 中有一些默认的 bean 选项，它们用于处理请求，渲染视图等。比如上一篇文章就用过的 <strong>viewResolver</strong> 的配置。当然，servlet 也允许你配置使用不同特定的 bean，但是，如果你没有配置，spring 将会按照默认的 bean 进行配置。本章将会详细说明文档中列出的 bean 的配置以及具体的使用例子，所讲述的 bean 类型包括：（使用版本：Spring-webmvc 4.3.18.RELEASE）</p><ul><li><a href="https://linesh.gitbooks.io/spring-mvc-documentation-linesh-translation/content/publish/21-4/handler-mappings.html" target="_blank" rel="noopener"><code>HandlerMapping</code></a> 和 HandlerAdapter</li><li><a href="https://linesh.gitbooks.io/spring-mvc-documentation-linesh-translation/content/publish/21-11/1-handler-exception-handler.html" target="_blank" rel="noopener"><code>HandlerExceptionResolver</code></a></li><li><a href="https://linesh.gitbooks.io/spring-mvc-documentation-linesh-translation/content/publish/21-8/using-locales.html" target="_blank" rel="noopener"><code>LocaleResolver</code></a> &amp; <a href="https://linesh.gitbooks.io/spring-mvc-documentation-linesh-translation/content/publish/21-8/1-obtaining-time-zone-information.html" target="_blank" rel="noopener"><code>LocaleContextResolver</code></a></li><li><a href="https://linesh.gitbooks.io/spring-mvc-documentation-linesh-translation/content/publish/21-9/1-overview-of-themes.html" target="_blank" rel="noopener"><code>ThemeResolver</code></a></li><li><a href="https://linesh.gitbooks.io/spring-mvc-documentation-linesh-translation/content/publish/21-10/springs-multipart-file-upload-support.html" target="_blank" rel="noopener"><code>MultipartResolver</code></a></li></ul><h2 id="2-HandlerAdapter-和-HandlerMapping-解析"><a href="#2-HandlerAdapter-和-HandlerMapping-解析" class="headerlink" title="2 HandlerAdapter 和 HandlerMapping 解析"></a>2 HandlerAdapter 和 HandlerMapping 解析</h2><h3 id="2-1-前期准备"><a href="#2-1-前期准备" class="headerlink" title="2.1 前期准备"></a>2.1 前期准备</h3><p>本章节将基于文档实践（一）的代码进行后续的操作，因此我们使用了单个 ContextConfig 来配置工程 Context 对象，也就是 root-context.xml 文件。另一方面，为了实现 HandlerMapping 在 xml 配置的功能，我们关掉了 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>的功能，使得 @Controller 注解下的类不再会被自动配置并且做 url 的映射，现在再去试一下 localhost:8080/hello.do 的话，已经是 404 Not Found 了。之后再进行后续的实践过程。</p><p>这里 HandlerMapping 和 HandlerAdapter 一起讲是因为，HandlerMapping 需要 HandlerAdapter 的支持才能正常运行。HandlerMapping 用于将请求的 url 映射到对应的 controller 上面，如果没有进行配置的话，<strong>@Controller</strong> 注解即为 HandlerMapping，上一篇的 <strong>ExampleController</strong> 即有着和上述相似的功能。值得注意的是，Spring MVC 4.0 之后主推 Annotation Driven，也就是注解驱动模式下的工程，因此，对应的 adapter 已经标记为 deprecated，不推荐使用，这里只做帮助理解使用。</p><h3 id="2-2-HandlerAdapter"><a href="#2-2-HandlerAdapter" class="headerlink" title="2.2 HandlerAdapter"></a>2.2 HandlerAdapter</h3><p>由于工程中的 Controller 都是用注解配置的，因此，在 DispatcherServlet 根据 bean 的配置信息（root-context.xml，我们用 Context 对象来配置 bean 的信息）知道了自己所需要调用的 controller 之后，他需要根据注解来提取其他的所需要的信息。这时候就需要 HandlerAdapter  来做这些解析的事情。</p><p>然而，目前的 Spring MVC 的配置都基于注解，因此，HandlerAdapter 也退居幕后，@Controller 注解包含了其中逻辑，在 Annotation-driven 被我们关掉的场景下，也只要做好 HandlerMapping，就可以成功地映射你想要的 url </p><h3 id="2-3-HandlerMapping"><a href="#2-3-HandlerMapping" class="headerlink" title="2.3 HandlerMapping"></a>2.3 HandlerMapping</h3><p>HandlerMapping 本质还是一个 Bean，他在 Spring MVC 装配完成之后，执行着将 URL 的请求转发到对应的 Controller 执行后续视图，数据等返回的工作。因此，在配置 HandlerMapping Bean 的时候，需要配置 property 的 mappings 字段，并且在 <prop> 字段下面指定对应的请求映射。具体代码如下：</prop></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/handler-mapping.do"</span>&gt;</span>handlerMappingController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-HandlerAdapter-和-HandlerMapping-的测试"><a href="#2-4-HandlerAdapter-和-HandlerMapping-的测试" class="headerlink" title="2.4 HandlerAdapter 和 HandlerMapping 的测试"></a>2.4 HandlerAdapter 和 HandlerMapping 的测试</h3><p>为了同步一下，目前 root-context.xml (Spring Context 对象配置文件) 的配置加入了 HandlerMapping 的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.test.myapp.example"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册一个用于 handlerMapping 的 bean 用于检测 handlerMapping 效果--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerMappingController"</span> <span class="attr">class</span>=<span class="string">"com.test.myapp.example.handlermapping.HandlerMappingController"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/handler-mapping.do"</span>&gt;</span>handlerMappingController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id="simpleHandler" class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mvc:annotation-driven/&gt;--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:prefix</span>=<span class="string">"/WEB-INF/views/"</span> <span class="attr">p:suffix</span>=<span class="string">".jsp"</span> <span class="attr">p:order</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且新增了 HandlerMappingController.java 的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.myapp.example.handlermapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Usage: 测试 handler mapping 的有效性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: srfan</span></span><br><span class="line"><span class="comment"> * Date: 10/26/18 4:11 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerMappingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/handler-mapping.do"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"handler_mapping_hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，HandlerMapping 下面配置了 <strong>/handler-mapping.do</strong> 的映射。因此，在运行工程之后，输入 localhost:8080/handler-mapping.do，就可以看到对应的 handler_mapping_hello.jsp 上的前端视图返回。</p><h2 id="3-HandlerExceptionResolver-解析"><a href="#3-HandlerExceptionResolver-解析" class="headerlink" title="3 HandlerExceptionResolver 解析"></a>3 HandlerExceptionResolver 解析</h2><p>HandlerExceptionResolver 是工程中用于捕获特定 Exception 的 Bean，可以提前设定自己需要捕获并且定向的 Exception，并且交由 HandlerExceptionResolver 映射到特定的视图页上面。 目前常用的方法有：</p><ul><li>实现 HandlerExceptionResolver 接口</li><li>在方法上使用 @ExceptionHandler 注解</li></ul><h3 id="3-1-实现-HandlerExceptionResolver-接口"><a href="#3-1-实现-HandlerExceptionResolver-接口" class="headerlink" title="3.1 实现 HandlerExceptionResolver 接口"></a>3.1 实现 HandlerExceptionResolver 接口</h3><p>HandlerExceptionResolver 接口只有一个待实现的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2, Object var3, Exception var4)</span></span>;</span><br></pre></td></tr></table></figure><p>为了工程上面比较直观简便的实现，我们只需要做最简单的实现：拿到 Exception 的具体类，并且返回对应的 error 的视图，并且记录下 Exception 的 message，显示在视图页面上面。因此我们的工序如下：</p><h4 id="3-1-1-实现一个自定义的-Exception-MyCustomException"><a href="#3-1-1-实现一个自定义的-Exception-MyCustomException" class="headerlink" title="3.1.1 实现一个自定义的 Exception: MyCustomException"></a>3.1.1 实现一个自定义的 Exception: MyCustomException</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.myapp.example.handlermapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCustomException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCustomException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 Exception 类很简单，只是把 message 放进 Exception 中，无需赘述，主要是要让 ExceptionResolver 捕获该 Exception。</p><h4 id="3-1-2-实现-HandlerExceptionResolver-接口：ExceptionResolver"><a href="#3-1-2-实现-HandlerExceptionResolver-接口：ExceptionResolver" class="headerlink" title="3.1.2 实现 HandlerExceptionResolver 接口：ExceptionResolver"></a>3.1.2 实现 HandlerExceptionResolver 接口：ExceptionResolver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.myapp.example.handlermapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> MyCustomException) &#123;</span><br><span class="line">            ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>);</span><br><span class="line">            modelAndView.addObject(<span class="string">"msg"</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> modelAndView;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用 ExceptionResolver 实现了 resolveException 方法，并且会解析 MyCustomException 并且在 ModelAndView 对象加入一个变量，并且返回名为 “error” 的 jsp 视图。我们也可以在 error.jsp 上显示这个 msg 字段的信息。</p><h4 id="3-1-3-HandlerMappingController-添加两个会抛出-Exception-的接口"><a href="#3-1-3-HandlerMappingController-添加两个会抛出-Exception-的接口" class="headerlink" title="3.1.3 HandlerMappingController 添加两个会抛出 Exception 的接口"></a>3.1.3 HandlerMappingController 添加两个会抛出 Exception 的接口</h4><p>为了对照效果，我们实现两个接口，一个会抛出 MyCustomException，另一个则会抛出普通的 IllegalArgumentException，而我们需要捕获的则是 MyCustomException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.myapp.example.handlermapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerMappingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/handler-mapping.do"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"handler_mapping_hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/custom-exception.do"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">throwException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyCustomException(<span class="string">"oh, you got custom exception message~!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/argument-exception.do"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">throwArgumentException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"oh, you got argument exception message~!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-4-视图文件-error-jsp-配置"><a href="#3-1-4-视图文件-error-jsp-配置" class="headerlink" title="3.1.4 视图文件 error.jsp 配置"></a>3.1.4 视图文件 error.jsp 配置</h4><p>视图文件 error.jsp 比较简单，只要体现 msg 字段即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ooooops, you meet MyCustomException<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>$&#123;msg&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-1-5-测试"><a href="#3-1-5-测试" class="headerlink" title="3.1.5 测试"></a>3.1.5 测试</h4><p>运行工程后，在浏览器分别输入：</p><ul><li><a href="http://localhost:8080/custom-exception.do：浏览器返回了" target="_blank" rel="noopener">http://localhost:8080/custom-exception.do：浏览器返回了</a> error.jsp 的视图并且输出了包裹在 MyCustomException 的信息，符合预期</li><li><a href="http://localhost:8080/argument-exception.do：浏览器返回了" target="_blank" rel="noopener">http://localhost:8080/argument-exception.do：浏览器返回了</a> 500 Internal Server Error，因为没有用于 IllegalArgumentException 的 resolver，因此返回了默认的视图。</li></ul><h3 id="3-2-使用-ExceptionHandler-注解"><a href="#3-2-使用-ExceptionHandler-注解" class="headerlink" title="3.2 使用 @ExceptionHandler 注解"></a>3.2 使用 @ExceptionHandler 注解</h3><p>另一种方法是使用 @ExceptionHandler 的注解，该注解用于 method 的签名上面，我们可以实现一个 Controller 的基类并让实际接收 url 请求的 Controller 继承该基类。<strong>值得注意的是</strong>，这个方法实现的 ExceptionResolver 只会在该 Controller 内部有效，而来自其他 Controller 类的 Exception 则无法得到解析。具体代码步骤如下：</p><h4 id="3-2-1-设置自定义-Exception-CustomExceptionForAnnotation"><a href="#3-2-1-设置自定义-Exception-CustomExceptionForAnnotation" class="headerlink" title="3.2.1 设置自定义 Exception: CustomExceptionForAnnotation"></a>3.2.1 设置自定义 Exception: CustomExceptionForAnnotation</h4><p>我们为这一次测试也设置了自定义的 Exception 类，实现方法也很简单，可以自定义 Exception 中的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.myapp.example.exceptionresolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExceptionForAnnotation</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomExceptionForAnnotation</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-实现有-ExceptionHandler-注解的-Controller-基类"><a href="#3-2-2-实现有-ExceptionHandler-注解的-Controller-基类" class="headerlink" title="3.2.2 实现有 @ExceptionHandler 注解的 Controller 基类"></a>3.2.2 实现有 @ExceptionHandler 注解的 Controller 基类</h4><p>我们的 Controller 基类需要 Resolve CustomExceptionForAnnotation，需要用 <strong>@ExceptionHandler(CustomExceptionForAnnotation.class)</strong> 进行配置，具体方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.myapp.example.exceptionresolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;CustomExceptionForAnnotation.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleCustomException</span><span class="params">(CustomExceptionForAnnotation ex)</span> </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"msg"</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，该类中所含有的方法仅会解析 CustomExceptionForAnnotation 类，并且将其重新导向 error.jsp 视图，最后输出对应的 message 信息到前端。</p><h4 id="3-2-3-实现两个-Controller-类"><a href="#3-2-3-实现两个-Controller-类" class="headerlink" title="3.2.3 实现两个 Controller 类"></a>3.2.3 实现两个 Controller 类</h4><p>为了使测试结果有对照性，我们实现了两个 Controller 类，一个继承自 BaseExceptionResolver，另一个则没有。理论上说，继承了 BaseExceptionResolver 的 Controller 将可以解析上面的 Exception，而另一个则不能。具体的配置方法如下：</p><ul><li><p>继承了 BaseExceptionResolver 的 Controller 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.myapp.example.exceptionresolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionController</span> <span class="keyword">extends</span> <span class="title">BaseExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"exception-for-annotation.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionForAnnotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CustomExceptionForAnnotation(<span class="string">"Oooops, you get CustomExceptionForAnnotation message"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>未继承 BaseExceptionResolver:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.myapp.example.exceptionresolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionOutsideController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"exception-for-annotation-outside.do"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionForAnnotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CustomExceptionForAnnotation(<span class="string">"Oooops, you get CustomExceptionForAnnotation message"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-2-4-测试"><a href="#3-2-4-测试" class="headerlink" title="3.2.4 测试"></a>3.2.4 测试</h4><p>我们仍然使用了 error.jsp 视图来做最后的测试工作，我们看到 BaseExceptionResolver 在捕获异常后，仍然会输出 error.jsp 的视图。我们将会请求两个具体 Controller 类的 url，观察是否会有我们想要的视图的输出：</p><ul><li>localhost:8080/exception-for-annotation.do: 成功输出了我们放入 CustomExceptionForAnnotation 的信息。</li><li>localhost:8080/exception-for-annotation-outside.do: 页面输出了 500 的错误信息，并且带上了 Exception 中的信息，因为其没有继承 BaseExceptionResolver，因此也没有对应的 Exception 解析器了。</li></ul><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4 小结"></a>4 小结</h2><p>本章主要讲述了 HandlerMapping 和 HandlerExceptionResolver 的具体实现代码，一个是处理正常的 url 请求的映射工具，而另一个则是专门处理工程在运行过程中出现 Exception 的处理方法。下一次我将继续介绍后面这几个特殊 Bean 的用法。</p>]]></content>
    
    <summary type="html">
    
      本文介绍了 Spring MVC 中重要的功能 --- 请求映射以及 Exception 的处理，从 Spring MVC 4.0 之后，文档推荐使用注释驱动型的工程。因此请求映射变得简单，只要在对应类上标志上 Controller 注解即可。对于 Exception 的处理，则有着一些需要注意的地方，其中，你既可以实现 HandlerExceptionResolver 接口来捕获全局范围内的你想捕获的 Exception 具体实现类；也可以使用 @ExceptionHandler 注解来实现一个基类中的一个方法，并让其他 Controller 类继承该基类。两者的使用特点有些不同，因此适用于不同的情况。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring MVC 4.2.4 文档实践（一）</title>
    <link href="http://yoursite.com/2018/10/12/Spring%20MVC%204.2.4%20%E6%96%87%E6%A1%A3%E5%AE%9E%E8%B7%B5(%E4%B8%80)/"/>
    <id>http://yoursite.com/2018/10/12/Spring MVC 4.2.4 文档实践(一)/</id>
    <published>2018-10-12T04:38:00.700Z</published>
    <updated>2018-11-20T15:07:29.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文基于 Spring MVC 4.2.4 的中文翻译文档，并在一定基础加上一部分的说明与实践，力求把文档中的内容反映到具体程序上，毕竟 TALK IS CHEAP, SHOW ME THE CODE. 希望通过这个文档的记录，可以把自己对于 Spring MVC 文档的一些理解分享给大家。</p><p>本文按照 Spring MVC 文档的次序，依次进行讲述。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="初始化-maven-工程"><a href="#初始化-maven-工程" class="headerlink" title="初始化 maven 工程"></a>初始化 maven 工程</h3><p>使用 Intellij 新建工程选项，在 maven 选项卡里面选择 maven-archetype-webapp，输入对应的工程名，点击创建，可以得到一个已经初始化了 webapp 文件。</p><h3 id="工程目录初始化设置"><a href="#工程目录初始化设置" class="headerlink" title="工程目录初始化设置"></a>工程目录初始化设置</h3><p>在 main 文件夹下，分别创建 java 和 resources 文件夹，点击 File - Project Structure，将 main 和 resources 设置为 Source Folders (蓝色)，和 Resource Folder (紫色)。</p><p>之后，在 java 的文件夹中设置好 package 的路径，本例的 package 名字为 <strong>com.test.myapp</strong>。</p><h3 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h3><p>为了让工程支持 Spring 的特性，需要在 pom.xml 中引入 springframework 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面，就开始用代码实例解释 Spring MVC 的文档。</p><h2 id="Spring-MVC-用-DispatcherServlet-处理请求"><a href="#Spring-MVC-用-DispatcherServlet-处理请求" class="headerlink" title="Spring MVC 用 DispatcherServlet 处理请求"></a>Spring MVC 用 DispatcherServlet 处理请求</h2><p>这一部分主要告诉我们：DispatcherServlet 是 Spring MVC 的中央处理器，它负责把请求分发到控制器中，这被称为“前端控制器”的设计模式，模式框架如下图所示：</p><p><img src="https://linesh.gitbooks.io/spring-mvc-documentation-linesh-translation/content/publish/21-2/figures/figure-21-1-the-request-processing-workflow-in-spring-web-mvc.jpg" alt="Front-end controller"></p><p>因此，DispatcherServlet 前端的 Incoming Request 发到（Delegate）对应的 Controller 下面，在 Controller 处理了 Request，并且创建 model 之后，将响应和 model 封装到对应的 view template 中，之后 view template 将控制权交还到 DispatcherServlet，并由其返回响应。</p><h3 id="DispatcherServlet-创建"><a href="#DispatcherServlet-创建" class="headerlink" title="DispatcherServlet 创建"></a>DispatcherServlet 创建</h3><p>而实际操作中，DispatcherServlet 由于继承了 HttpServlet 类，也需要在 web.xml 文件下进行声明。因此，可以照着文档中的例子进行 DispatchServlet 的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Dispatched Servlet Demo<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>example<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--load on startup 大于 0 代表这个容器在应用启动时就加载，而等于 0 则表示在这个容器被选择时加载--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--load-on-startup 的值越小，代表加载的优先级越大--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>example<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/example/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上述代码所示，我们配置了一个名为 example 的 dispatcherServlet，而当 url 的后缀为 example 时，默认将使用该 DispatcherServlet 进行请求（request）的转发和视图（view ）的返回。</p><p>值得一提的是，我们在 web.xml 中定义了名为 example 的 DispatcherServlet，Spring 将为在 WEB-INF 中寻找名为 example-servlet.xml 的文件以获取对应的 bean 配置信息。因此，我们还需要创建 <strong>example-servlet.xml</strong> 的文件以设置对应的 bean 信息。</p><h3 id="example-servlet-的配置"><a href="#example-servlet-的配置" class="headerlink" title="example-servlet 的配置"></a>example-servlet 的配置</h3><p>example-servlet 中需要我们指定 bean 的位置，即 Spring MVC 系统需要去哪个地方寻找 bean 的配置并自动装配。另一方面，需要配置 viewResolver 以便返回视图。因此，我们在 example-servlet.xml 中首先需要包含这些信息，下述代码配置了 example-servlet 中的 bean 的扫描路径，以及视图解析器 viewResolver。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context-3.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.test.myapp.example"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:prefix</span>=<span class="string">"/WEB-INF/views/"</span> <span class="attr">p:suffix</span>=<span class="string">".jsp"</span> <span class="attr">p:order</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先解释一下头文件</p><ul><li>beans：文件的根节点</li><li>Xmlns：xmlns 是 xml name space 的缩写，用于区分这个 xml 文件下的定义和其他 xml 文件下的定义。</li><li>Xmlns:&lt;组件&gt;：表示一个组件配置的 namespace，比如上文用到了 context 的组件来扫描 component 注解，则需要配置 <strong>xmlns:context</strong></li><li>xmlns:xsi：是指xml文件遵守xml规范，xsi 全名 <strong>xml schema instance</strong>，表示具体用到的 schema 资源文件里定义的元素所准守的规范。</li><li>xsi:schemaLocation：表示 xml 的某个组件需要遵循的规范，比如 xmls:context 需要遵循的规范就是<ul><li><a href="http://www.springframework.org/schema/context" target="_blank" rel="noopener">http://www.springframework.org/schema/context</a></li><li><a href="http://www.springframework.org/schema/context/spring-context-3.2.xsd" target="_blank" rel="noopener">http://www.springframework.org/schema/context/spring-context-3.2.xsd</a></li></ul></li></ul><p>头文件的配置更多的是理解一个类似于 package 的概念，在定义了 namespace(xmlns) 之后，你需要哪些元素或者组件，则定义他的规则以及 instance 的规则，以便后续的 xml 配置使用这些配置。</p><p><strong>context</strong> 部分表示了这个工程要去哪里去寻找这个应用的 component，并实现实例的自动装配，这里制定了一个针对 component 的过滤器（filter），使它只会在遇到 controller 的类时候进行自动装配。</p><h3 id="配置-Controller-和-jsp"><a href="#配置-Controller-和-jsp" class="headerlink" title="配置 Controller 和 jsp"></a>配置 Controller 和 jsp</h3><p>在配置好 servlet 的转发后，我们需要配置其扫描路径下的 Controller 和对应的 jsp 视图。在整理完成对应用途的文件和文件夹之后，工程结构如下图所示：</p><p><img src="/Users/shenruofan/Desktop/屏幕快照 2018-10-22 下午5.51.03.png" alt="工程文件结构"></p><p>首先在 <strong>com.test.my.example.controller</strong> 下创建对应的 controller 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.myapp.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是，由于在 example-servlet.xml 中已经配置了 url 的格式，它表示这个 servlet 只在 /example/* 的 url 格式下面才会生效。因此当我们在 <strong>helloWorld</strong> 这个方法上指定 RequestMapping 为 “hello” 时，则令其实际生效的 url 应当为 <strong>/example/hello</strong>。由于 <strong>helloWorld()</strong> 方法返回了 “hello”，则 viewResolver 在 views 下面去寻找名为 hello.jsp 的文件。因此，我们还需要一个 hello.jsp 的视图文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;hello world&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;example::::::hello world!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>之后就是运行 tomcat 时所用到的相关配置，并且 maven 打包这个工程，本机使用了 localhost:8080 端口，则输入了 <strong><a href="http://localhost:8080/example/hello" target="_blank" rel="noopener">http://localhost:8080/example/hello</a></strong> 之后，网页出现了</p><p><img src="/Users/shenruofan/Desktop/屏幕快照 2018-10-23 下午3.09.32.png" alt="效果图"></p><p>的样子，则说明这个 controller 成功返回了 view 视图。类比上述“前端控制器”的设计模式，我们可以看到：</p><p>当前端有请求进来时，比如 /example/hello，Spring MVC 将会识别这个 url 下生效的 servlet，然后该 servlet 会把它分发到 url 映射到的方法上，而该方法会返回一个视图的名称到 servlet；之后，servlet 会去找对应名字的 template，组装完成后，再返回到用户的前端。因此，我们才可以看到 hello.jsp 的前端样式展现在我们眼前。</p><h2 id="配置根-context-对象代替-Servlet-xml"><a href="#配置根-context-对象代替-Servlet-xml" class="headerlink" title="配置根 context 对象代替 Servlet.xml"></a>配置根 context 对象代替 Servlet.xml</h2><p>这篇文档的最后提到了这样一句话:</p><blockquote><p>当你的应用中只需要一个<code>DispatcherServlet</code>时，只配置一个根 context 对象也是可行的。</p></blockquote><p>因此，我们可以试一下只配置一个 ContextConfig 的条件下，能不能导航到这个 hello.jsp 文件。</p><h3 id="配置-Root-Context"><a href="#配置-Root-Context" class="headerlink" title="配置 Root Context"></a>配置 Root Context</h3><p>首先，更新 web.xml 的配置，使其只使用一个 ContextConfig 来管理 servlet 下面的 beans，配置内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Dispatched Servlet Demo<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用根 context 來管理 servlet 的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>WEB-INF/root-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里注意一下 servlet-mapping 的 url 拦截问题，其实源文档的这种配置会有问题，如果不加 <strong>.do</strong> 的话，会把 jsp 解析的请求也拦截下来，造成 <strong>noHandlerFound for *.jsp</strong> 的问题，因此需要一个特殊的 url 后缀进行区分，防止 servlet 拦截不该拦截的请求。其次，我们需要配置 WEB-INF 路径下的 root-context.xml 文件，配置方法与上面的 example-servlet.xml 的相同。controller 亦然，需要主要的是，现在是当你输入 /hello.do 时，可以返回 hello.jsp 的视图。</p><p>之后也是运行 tomcat 时所用到的相关配置，并且 maven 打包这个工程，本机使用了 localhost:8080 端口，则输入了 <strong><a href="http://localhost:8080/hello.do" target="_blank" rel="noopener">http://localhost:8080/hello.do</a></strong> 之后，网页出现了</p><p><img src="/Users/shenruofan/Desktop/屏幕快照 2018-10-23 下午3.09.32.png" alt="效果图"></p><p>证明我们的 root context 的配置是有效的。</p><h3 id="RootContext-xml-和-Servlet-xml-的差别"><a href="#RootContext-xml-和-Servlet-xml-的差别" class="headerlink" title="RootContext.xml 和 Servlet.xml 的差别"></a>RootContext.xml 和 Servlet.xml 的差别</h3><p>通过上面的配置，看起来 RootContext 和 servlet 的配置文件对 Spring MVC 工程的作用是一样的，其实不然，根据官方文档:</p><blockquote><p>Spring lets you define multiple contexts in a parent-child hierarchy.  </p><p>The applicationContext.xml defines the beans for the “root webapp context”, i.e. the context associated with the webapp.  </p><p>The spring-servlet.xml (or whatever else you call it) defines the beans for one servlet’s app context. There can be many of these in a webapp, one per Spring servlet (e.g. spring1-servlet.xml for servlet spring1, spring2-servlet.xml for servlet spring2).  </p><p>Beans in spring-servlet.xml can reference beans in applicationContext.xml, but not vice versa.  </p><p>All Spring MVC controllers must go in the spring-servlet.xml context.  </p><p>In most simple cases, the applicationContext.xml context is unnecessary. It is generally used to contain beans that are shared between all servlets in a webapp. If you only have one servlet, then there’s not really much point, unless you have a specific use for it.  </p></blockquote><p>大概的意思是，ApplicationContext.xml 和 Servlet.xml 是父子之间的关系，其中一个 Spring mvc 工程里应当只有一个 ApplicationContext，然而可以有多个 Servlet 的配置；并且，Servlet.xml 可以去引用 ApplicationContext 中的 bean，但是反过来却不行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章讨论了 Spring MVC 中 web.xml，以及下面的 servlet.xml 或者 contextConfig.xml 的配置方法及注意事项，并用实际代码的方式，理解 Spring MVC 的前端控制器设计思想。</p>]]></content>
    
    <summary type="html">
    
      本文将开启一个专题，讲述自己在学习 Spring MVC 文档的过程中的所思所想，以及相关知识点的背后的原理，源码的解析，希望可以帮助加深对 Spring 文档的理解。本文记录了如何开始一个 Spring MVC 工程，为后续的拓展做准备。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Log4j 2 Async Logging 的原理和实现</title>
    <link href="http://yoursite.com/2018/10/12/Log4j%202%20Async%20Logging%20%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/10/12/Log4j 2 Async Logging 的原理和实现/</id>
    <published>2018-10-12T04:37:58.211Z</published>
    <updated>2018-10-25T17:15:20.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>性能</strong>是企业级应用十分注重的方面，我们都不想让打日志这个过程成为性能的瓶颈。对于小型应用，日志应用可能无法构成瓶颈，但如果是企业级有高并发的需求的工程，每秒调用几百甚至上千次的 log 方法，可想而知，对于磁盘读写来说是非常恐怖的。因此，为了提高日志系统的性能，我们引入 log4j 2 的异步日志（asyncLogger）功能。异步日志通过将打日志的逻辑和执行代码的线程解耦，使得打日志的逻辑有自己的专有线程，排除了日志的性能瓶颈问题。</p><p>众所周知，I/O 操作是程序中的性能杀手，因为 I/O 过程会不可避免地引入锁和线程等待，如果占用了程序进程，则会大量消耗程序的性能，因此，把日志逻辑分到其他线程上去操作，则可以大量释放主线程的资源以更高效地执行任务，而异步日志就是实现了这个功能，下面，就来讲讲异步日志系统的实现原理。</p><h2 id="log4j-2-Async-Logging-的实现原理"><a href="#log4j-2-Async-Logging-的实现原理" class="headerlink" title="log4j 2 Async Logging 的实现原理"></a>log4j 2 Async Logging 的实现原理</h2><p>多线程日志系统（Multi-thread Logging）在 log4j2 的 async logging 之前就已经出现了，但是 log4j2 的 async logger 与传统异步日志的主要差异在于：<strong>logging 逻辑是如何被主线程分配到其他线程上去的</strong>。传统异步日志系统使用了 <strong>ArrayBlockingQueue</strong> 的数据结构，而我们知道，ArrayBlockingQueue 的源码中使用了全局锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Main lock guarding all access */</span></span><br><span class="line"><span class="keyword">final</span> ReentrantLock lock;</span><br></pre></td></tr></table></figure><p>来保证内部数据的一致性和可见性，而引入锁的同时就会引发阻塞和等待，因此，使用带有全局锁的数据结构将日志信息转交给专门的 I/O 相关线程并不是最优的方法。为了优化这一部分的性能损耗，log4j 2 中的 Async Logger 使用了一种不使用锁的线程信息交换库：LMAX-disruptor，实现了更高的吞吐量和更短的延迟。</p><h3 id="LMAX-Disruptor-解析"><a href="#LMAX-Disruptor-解析" class="headerlink" title="LMAX Disruptor 解析"></a>LMAX Disruptor 解析</h3><h4 id="LMAX-Disrutor-概述"><a href="#LMAX-Disrutor-概述" class="headerlink" title="LMAX Disrutor 概述"></a>LMAX Disrutor 概述</h4><p>LMAX Disruptor 的设计来自于 LMAX 公司的高性能的交易系统，其 Business Processor 模块单元（主从模式，防止一个模块单元挂掉）是一个单线程的事件驱动型系统，却可以实现 600 万次/秒的订单处理速度，而为了保证这个高效率的 Business Processor 可以高效运行，其输入事件处理单元需要有较强的处理能力，并且可以保证生成符合条件的输入事件，进入后续 Processor 进行处理。而 LMAX Disruptor 就诞生于这个<strong>输入事件处理单元</strong>（后面称为“单元”）中，根据文档中的说法，这个“单元”需要对传输线路中过来的信息有如下的功能：</p><ul><li>Replicator：复制多份，送到主从模式的各 Business Processor 中进行处理</li><li>Unmarshaller：信息解析，以便后续处理器可以更方便地处理</li><li>Journaller：将处理的事件打入日志，保证故障恢复过程</li></ul><p><img src="https://martinfowler.com/articles/images/lmax/input-activity.png" alt="Input Message Processor Structure"></p><p>可以看到，这三个功能没有特定的顺序要求，你什么时候复制，什么时候打日志，什么时候解码都对后续的状态没有任何影响，因此，这样的特点天然适合于并行操作。而这三个功能可以抽象成为消息的消费者，图中 Receive Message 模块可以作为消息的生产者；这样一个天然的消息队列的模型就建立了。</p><h4 id="LMAX-Disruptor-数据结构选型"><a href="#LMAX-Disruptor-数据结构选型" class="headerlink" title="LMAX Disruptor 数据结构选型"></a>LMAX Disruptor 数据结构选型</h4><p>前面说到，LMAX Disruptor 的本质是一个生产者-消费者模式的消息队列。如果用类似于 ArrayBlockingQueue 这种数据结构作为消息队列的话，如果锁粒度太大，则会出现读写竞争，造成阻塞；如果锁粒度太小，则实现上难度太大，其实阻塞队列的实现在实测中也被发现阻塞情况耗费太多性能的情况。因此 LMAX Disruptor 选择了自己实现一个环形缓冲器的数据结构（Ring Buffer），而在这上面均匀分布着槽（Slot），我们的生产者和消费者在某一个时间点都会对应某一个下标的槽，但是，消费者的下标不会越过生产者的下标，这会体现在：如果消费者无法获得下一个可用的槽，则消费者会等待。</p><p><img src="https://martinfowler.com/articles/images/lmax/disruptor.png" alt="RingBuffer Structure"></p><p>上图就是 LMAX Disruptor 的环形缓冲器的具体结构，图中 Receiver 是消息的生产者，用于收取信息，并写在 Ring Buffer 上；而 Journaler，Replicator，Un-marshaller，Bussiness Logic Consumer 都是信息的消费者。他们之间的规则是：</p><ul><li>任意对象只能操作自己所在下标的槽</li><li>任意对象可以看到其他对象所在的下标</li></ul><p>另一方面，他们的 sequence（指针）在一定程度上是有次序的，其中 Journaler，Replicator，Un-marshaller 的消费进度不会超过 Receiver，而 Bussiness Logic Consumer 的消费进度不会超过 Un-marshaller（因为 Business Logic Consumer 需要 Un-marshaller 解码后的信息）。因此，如果在运行过程中 15 槽的 Un-marshaller 遇到了处理上的问题，用了较长时间，则 Bussiness Logic Consumer 会等待 Un-marshaller 执行完这个槽的逻辑后，再消费后续槽中的信息。</p><p>同时，这也引入了一个问题，如果有消费者落后了 Receiver 太多怎么办？LMAX Disruptor 提供了接口，可以获得后续至多可以消费几个槽的信息，并且使用 batch-read 的方法，大幅提高消息的速度，使得消费者可以很快追上 Receiver 的生产速度，有效杜绝 Receiver 生产过快而等待时间较长的隐患。</p><h4 id="LMAX-Disruptor-关键算法部分源码实现"><a href="#LMAX-Disruptor-关键算法部分源码实现" class="headerlink" title="LMAX Disruptor 关键算法部分源码实现"></a>LMAX Disruptor 关键算法部分源码实现</h4><p>首先，了解一下 3.0 源码中的一些类</p><ul><li>RingBuffer：RingBuffer 数据结构，只用于存储数据，更新数据<ul><li>值得注意的是，RingBuffer 把生产者的逻辑包括在了其中（其有 <strong>publishEvent</strong> 的方法）</li></ul></li><li>Sequencer: 各生产者 / 消费者的下标控制器，可以获得后续可以使用的 RingBuffer 的槽</li><li>Sequence: 各生产者 / 消费者的当前下标</li><li>EventProcessor: 消費者，其控制着一个 Sequence 对象，通过 Sequence 进行槽中信息的读取</li></ul><h5 id="基本的存取逻辑"><a href="#基本的存取逻辑" class="headerlink" title="基本的存取逻辑"></a>基本的存取逻辑</h5><p>RingBuffer 基本的存取比较简单，生产者获取下一个可用 slot，获取其中的元素（Event），对元素进行操作，并且发布。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> sequence = ringBuffer.next();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Event e = ringBuffer.get(sequence);</span><br><span class="line"><span class="comment">// 对 e 进行相关操作</span></span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">// ringBuffer 发布槽下标为 sequence 的信息</span></span><br><span class="line">    ringBuffer.publish(sequence);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>next()</strong> 方法实现了阻塞的功能，防止出现消费者越过生产者，也防止生产者的进度越过消费者，覆盖了未消费的信息，这个后面可以讲到。</p><p>消费者获取槽中的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> E <span class="title">elementAt</span><span class="params">(<span class="keyword">long</span> sequence)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (E) UNSAFE.getObject(entries, REF_ARRAY_BASE + ((sequence &amp; indexMask) &lt;&lt; REF_ELEMENT_SHIFT));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生产者-消费者下标的边界问题"><a href="#生产者-消费者下标的边界问题" class="headerlink" title="生产者/消费者下标的边界问题"></a>生产者/消费者下标的边界问题</h5><p>要实现这样一个数据结构，算法层面上需要解决以下的问题：</p><ul><li>消费者的消费速度赶上生产者时，消费者需要等待</li><li>生产者的生产正好到消费者后面时，生产者需要等待</li></ul><p>要解决以上问题，需要在 <strong>next()</strong> 方法里设置等待的条件。通过下面的 <strong>next()</strong> 的方法源码可以看到具体的实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"n must be &gt; 0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> nextValue = <span class="keyword">this</span>.nextValue;</span><br><span class="line"><span class="keyword">long</span> nextSequence = nextValue + n;</span><br><span class="line"><span class="keyword">long</span> wrapPoint = nextSequence - bufferSize;</span><br><span class="line"><span class="keyword">long</span> cachedGatingSequence = <span class="keyword">this</span>.cachedValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (wrapPoint &gt; cachedGatingSequence || cachedGatingSequence &gt; nextValue) &#123;</span><br><span class="line"></span><br><span class="line">cursor.setVolatile(nextValue);  <span class="comment">// StoreLoad fence</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">long</span> minSequence;</span><br><span class="line">      <span class="keyword">while</span> (wrapPoint &gt; (minSequence = Util.getMinimumSequence(gatingSequences, nextValue))) &#123;</span><br><span class="line">         LockSupport.parkNanos(<span class="number">1L</span>); <span class="comment">// <span class="doctag">TODO:</span> Use waitStrategy to spin?</span></span><br><span class="line">     &#125;</span><br><span class="line"><span class="keyword">this</span>.cachedValue = minSequence;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.nextValue = nextSequence;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nextSequence;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在获取下一个可用槽的过程中，有一个 <strong>GatingSequence</strong> 的概念，它是用于防止生产者写完一圈去覆盖了未被消费的信息。一般来说，GatingSequence 是 RingBuffer 上面最后一个 EventProcessor 的 <strong>getSequence()</strong> 的返回，防止生产者越过最后一个消费者。因此，当自己理想的下一个可用槽大于 GatingSequence 的下标时，则会通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LockSupport.parkNanos(<span class="number">1L</span>);</span><br></pre></td></tr></table></figure><p>进入等待，该循环直到下一个可用槽被 GatingSequence 释放后才结束。之后，生产者就可以在获取到的可用槽中进行消息的更新。值得注意的是，还有一个 <strong>tryNext()</strong> 的方法是不阻塞的。</p><p>而对于消费者的消费速度赶上生产者的速度的情况：在消费者消费完自己所在的槽的信息后，如要获取下一个可用的槽，则会调用 waitFor 方法，如果目标的 sequence 还没有被生产者 publish，则会继续等待，直到该槽被生产者 publish 方可进入使用。</p><p>值得一提的是，对于 Sequencer 的操作都是<strong>原子性</strong>的，因此不用担心消费者，生产者同时操作的情况，使得有序性得到了保证。</p><p>因此，我们可以知道 LMAX Disruptor 使用环形的存储结构，并且基于 Sequence 下标的可见性和原子级操作，有效保证了消费者和生产者之间的有序性，和信息消费的有序性。</p><h3 id="Async-Logging-中对于-LMAX-Disruptor-的使用"><a href="#Async-Logging-中对于-LMAX-Disruptor-的使用" class="headerlink" title="Async Logging 中对于 LMAX Disruptor 的使用"></a>Async Logging 中对于 LMAX Disruptor 的使用</h3><p>说了那么多，那么 Async Logging 如何利用 LMAX Disruptor 的特性，实现异步日志的呢？在启动期间，Log4j 2 会解析 .properties 的文件，并且启动对应名称 logger appender 线程，等待消费者 EventProcessor 把 RingBuffer 中对应的消息取出来，扔到对应的 logger appender 的线程中进行记录。在外部程序触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">"&lt;Message&gt;"</span>);</span><br></pre></td></tr></table></figure><p>时，log4j 2 库对日志消息进行封装后，调用 AsyncLoggerConfig 的 <strong>tryEnqueue</strong> 方法去使用自身拥有的 RingBuffer 实例，将最新的日志消息放入下一个可用的 RingBuffer 的槽里面。而 EventProcessor 在没有收到 publish 的时候将会处于 <strong>waitFor</strong> 的状态，在监听 EventProcessorBarrier 的通知后，会去获取最近的有更新的槽（或者 BatchProcess），并且把获得的消息分配给对应的 appender 线程，并由该线程处理日志信息的打出 / 写入文件的操作。因此可以画出如下的 UML 的图：</p><p><img src="http://on-img.com/chart_image/5bbf1471e4b0d4d65c286d95.png" alt="Log4j Assync Logging UML"></p><p>这也映证了 Log4j 2 中的异步日志对于日志线程如何获取对应任务的方式出现了变化，其摒弃了传统阻塞队列的模式，而使用了 RingBuffer 无锁队列的模式以达到更为优秀的吞吐量。</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>测试环境 jdk_1.8</p><p>测试机器：macOS mojave，处理器：2.3 GHz Intel Core i5，内存： 8 GB 2133 MHz LPDDR3</p><table><thead><tr><th>logger 类别</th><th>50 线程，500000 条日志</th><th>50 线程，1000000 条日志</th></tr></thead><tbody><tr><td>Log4j 1 Sync</td><td>1869 ms</td><td>3552 ms</td></tr><tr><td>Log4j 2 Sync</td><td>1980 ms</td><td>3691 ms</td></tr><tr><td>Log4j 1 Async</td><td>1256 ms</td><td>2387 ms</td></tr><tr><td>Log4j 2 Async</td><td>376.5 ms</td><td>537 ms</td></tr><tr><td></td><td></td></tr></tbody></table><p>可以看到，在同步日志上面，log4j1 和 log4j2 并没有很大的性能优劣之分；然而，在 log4j 2 主打的异步日志性能上面，出现了很大的提高，快了 log4j 1 的异步日志将近 6 倍，这是由于 log4j 1 的异步日志使用的 ArrayBlockingQueue 的机构，其中的读写竞争，造成了锁的阻塞，损耗了大量的性能。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Log4j 2 主打异步日志模式，其基于 LMAX Disurptor 中的环形缓冲器 RingBuffer 的数据结构，巧妙地解决了异步日志多个日志线程的读写竞争的问题，极大地优化了工程中日志系统的性能，使其较小概率地成为工程中的性能瓶颈。</p>]]></content>
    
    <summary type="html">
    
      众所周知，企业级应用的日志系统容易成为性能瓶颈，高并发场景下，如果你调用 jstack 一般会发现栈调用都会卡在 log 类上面，现有的解决方法是使用异步日志系统 AsyncLogger。然而传统的 AsyncLogger 都使用了消息队列的形式，因此引入了阻塞和等待的时间，这也会引发性能损耗。而 Log4j 2 的异步日志引入了 Disruptor 的数据结构，解决了引入锁而引发的问题，本文将基于 Log4j 2 源码讲述 Log4j 2 异步日志的原理。
    
    </summary>
    
    
  </entry>
  
</feed>
